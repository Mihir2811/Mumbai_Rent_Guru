# -*- coding: utf-8 -*-
"""Rental House Price Prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sxRpvGj5VsLHMRg9OlDQdQTt4x5nAFt5
"""

import pandas as pd
import numpy as np
#import matplotlib.pyplot as plt
#import seaborn as sns

data = pd.read_csv('Indian_housing_Mumbai_data.csv')

data.describe()

data.info()

data.shape

data.drop('latitude',inplace=True,axis=1)

data.drop('longitude',inplace=True,axis=1)
data.drop('isNegotiable',inplace=True,axis=1)
data.drop('priceSqFt',inplace=True,axis=1)
data.drop('description',inplace=True,axis=1)
data.drop('currency',inplace=True,axis=1)
data.drop('city',inplace=True,axis=1)

data.describe()

data.info()

data.isnull().sum()

data['numBathrooms'].fillna(data['numBathrooms'].mean(), inplace=True)

data['numBathrooms'].unique()

data['numBalconies'].unique()

data['numBalconies'].fillna(0, inplace=True)

data['numBalconies'].unique()

data.info()

data.isnull().sum()

data.head(5)

"""# Data is now free from null values
Now we will remove the extra symbols from interger values
"""

data['house_type'].head()

data['house_type'].unique()

data['house_type'] = data['house_type'].str.replace(' ','')

data['house_size'].head()

data['house_size'].str.split()

data['house_size'].str.split().str.get(0)

data['house_size'] = data['house_size'].str.split().str.get(0).str.replace(',','')
data['house_size'].head(8)

data['location'].unique()

"""

*   type done
*   size done
*   location done

"""

data.head(5)

"""Changing type"""

data['numBathrooms'] = data['numBathrooms'].astype(int)
data['numBalconies'] = data['numBalconies'].astype(int)
data['house_size'] = data['house_size'].astype(int)

data['numBathrooms'].unique()

data['numBalconies'].unique()

data['verificationDate'].unique()

data['verificationDate'] = data['verificationDate'].str.split().str.slice(1,3).str.join(' ')
data['verificationDate']

data.head(5)

"""

*   type done
*   size done
*   location done
*   price done
*   bath done
*   bal done
*   veri done







"""

data['SecurityDeposit'].unique()

data['SecurityDeposit'] = data['SecurityDeposit'].str.replace('No Deposit', '0')

data['SecurityDeposit'] = data['SecurityDeposit'].str.replace(',','')

data['SecurityDeposit'] = data['SecurityDeposit'].astype(int)

data['SecurityDeposit'].unique()

data['Status'].unique()

"""# Data is Now cleaned and ready for modeling"""

data.to_csv('cleaned_data.csv')

data

"""# Modeling"""

x = data.drop(columns = 'price')
y = data['price']

x.head(5)

y.head(5)

from sklearn.model_selection import train_test_split
xtrain, xtest, ytrain, ytest = train_test_split(x,y,test_size=0.2)

from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import make_column_transformer
from sklearn.pipeline import make_pipeline

hot = OneHotEncoder()
hot.fit(x[['house_type','location','verificationDate', 'Status']])

hot.categories_

column_trans = make_column_transformer((OneHotEncoder(categories = hot.categories_), ['house_type','location','verificationDate', 'Status']), remainder='passthrough')
# handle_unknown='ignore' you can use

column_trans

lr = LinearRegression()

pipe = make_pipeline(column_trans, lr)

pipe.fit(xtrain,ytrain)

y_pred = pipe.predict(xtest)

y_pred

r2_score(ytest, y_pred)

mean_absolute_error(ytest, y_pred)

mean_squared_error(ytest, y_pred)

for i in range(10):
  xtrain, xtest, ytrain, ytest = train_test_split(x,y,test_size=0.2)
  lr = LinearRegression()
  pipe = make_pipeline(column_trans, lr)
  pipe.fit(xtrain, ytrain)
  y_pred = pipe.predict(xtest)
  print(r2_score(ytest, y_pred))

score = []

for i in range(1000):
  xtrain, xtest, ytrain, ytest = train_test_split(x,y,test_size=0.2, random_state=i)
  lr = LinearRegression()
  pipe = make_pipeline(column_trans, lr)
  pipe.fit(xtrain, ytrain)
  y_pred = pipe.predict(xtest)
  score.append(r2_score(ytest, y_pred))

np.argmax(score)

score[np.argmax(score)]

xtrain, xtest, ytrain, ytest = train_test_split(x,y,test_size=0.2, random_state=np.argmax(score))
lr = LinearRegression()
pipe = make_pipeline(column_trans, lr)
pipe.fit(xtrain, ytrain)
y_pred = pipe.predict(xtest)
print('R2 Score:',r2_score(ytest, y_pred))
print('Mean absolute error:',mean_absolute_error(ytest, y_pred))
print('Mean squared error:',mean_squared_error(ytest, y_pred))

data.head(5)

pipe.predict(pd.DataFrame([['1BHKApartment', 1180, 'Ulwe', 2, 0, '2 years', 0, 'Furnished']], columns=['house_type','house_size','location','numBathrooms','numBalconies','verificationDate','SecurityDeposit',	'Status']))

import pickle

pickle.dump(pipe, open('Model.py', 'wb'))

